#!/usr/bin/env python3

from aoc import *
import operator

print("len", [1, 2, 3].len)
print("indices", [1, 2, 3].indices())
print("first", [1, 2, 3].first)
print("last", [1, 2, 3].last)
print("random", [1, 2, 3].random())
print("max", [1, 2, 3].max())
print("min", [1, 2, 3].min())
print("max_by", [1, 2, 3].max_by(operator.gt))
print("min_by", [1, 2, 3].min_by(operator.gt))
print("max_index", [1, 2, 3].max_index())
print("min_index", [1, 2, 3].min_index())
print("max_index_by", [1, 2, 3].max_index_by(operator.gt))
print("min_index_by", [1, 2, 3].min_index_by(operator.gt))
print("first_index_of", [1, 2, 3].first_index_of(2))
print("first_by", [1, 2, 3].first_by(lambda x: x != 1))
print("first_index_by", [1, 2, 3].first_index_by(lambda x: x != 1))
print("last_index_of", [1, 2, 3].last_index_of(2))
print("last_by", [1, 2, 3].last_by(lambda x: x != 1))
print("last_index_by", [1, 2, 3].last_index_by(lambda x: x != 1))
print("reversed", [1, 2, 3].reversed())
print("map", [1, 2, 3].map(lambda x: x * 2))
print("fold", [1, 2, 3].fold(operator.add))
print("fold empty", {}.fold(operator.add))
print("reduce", [1, 2, 3].reduce(0, operator.mul))
print("enumerated", [1, 2, 3].enumerated())
a = [1, 2, 3]
a.swap(1, 2)
print("swap", a)
print("flatten", [[1, 2], 3, {4}].flatten())
print("compact", [1, None, 2, None, None, 3].compact())
print("intersperse", [1, 2, 3].intersperse(0))
print("window", [1, 2, 3, 4, 5].window(3))
print("chunk", [1, 2, 3, 4, 5].chunk(2))
print("chunk_by", [1, 2, 4, 5, 6, 8, 9, 11].chunk_by(lambda a, b: b - a <= 1))
print("str_join", [1, 2, 3].str_join(", "))
print("has_prefix", [1, 2, 3].has_prefix([1, 2]))
print("has_suffix", [1, 2, 3].has_suffix([1, 2]))
print("partition", [1, 2, 3].partition(lambda x: x % 2))
print("exclude_each", [1, 2, 3].exclude_each())
(a, b) = (2, 1)
(a, b) = (a, b).sorted()
print("sorted", a, b)
print("sorted predicate", [1, 2, 3].sorted(operator.gt))
print("rotate", [1, 2, 3, 4].rotate(-3))
print("transpose", [[1, 2, 3, 4], [5, 6, 7, 8]].transpose())
print("diagonals", [[1, 2, 3], [4, 5, 6], [7, 8, 9]].diagonals())
print("sj_range 1-10", sj_range(1, 10))
print("sj_range 10-1", sj_range(10, 1))
print("sj_irange 1-10", sj_irange(1, 10))
print("sj_irange 10-1", sj_irange(10, 1))
matrix = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print("matrix dimensions", matrix.rows, matrix.columns)
print("matrix subscript", matrix[1, 1])
matrix[1, 1] += 10
print("matrix modify", matrix[1, 1])
print("matrix neighbors8", matrix.neighbors8(0, 0), matrix.neighbors8(1, 1), matrix.neighbors8(2, 2))
print("matrix neighbors4", matrix.neighbors4(0, 0), matrix.neighbors4(1, 1), matrix.neighbors4(2, 2))
print("matrix neighbors4_diag", matrix.neighbors4_diag(0, 0), matrix.neighbors4_diag(1, 1), matrix.neighbors4_diag(2, 2))
