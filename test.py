#!/usr/bin/env python3

from aoc import *
import operator

def _check(name, result, expected):
	print(name, result)
	assert expected(result)

def check(name, result, expected):
	_check(name, result, _0 == expected)

check("len", [1, 2, 3].len, 3)
check("indices", [1, 2, 3].indices(), range(0, 3))
check("first", [1, 2, 3].first, 1)
check("last", [1, 2, 3].last, 3)
_check("random", [1, 2, 3].random(), lambda x: [1, 2, 3].first_index_of(x) != None)
check("max", [1, 2, 3].max(), 3)
check("min", [1, 2, 3].min(), 1)
check("max_by", [1, 2, 3].max_by(operator.gt), 1)
check("min_by", [1, 2, 3].min_by(operator.gt), 3)
check("max_index", [1, 2, 3].max_index(), 2)
check("min_index", [1, 2, 3].min_index(), 0)
check("max_index_by", [1, 2, 3].max_index_by(operator.gt), 0)
check("min_index_by", [1, 2, 3].min_index_by(operator.gt), 2)
check("first_index_of", [1, 2, 3].first_index_of(2), 1)
check("first_by", [1, 2, 3].first_by(_0 != 1), 2)
check("first_index_by", [1, 2, 3].first_index_by(_0 != 1), 1)
check("last_index_of", [1, 2, 3].last_index_of(2), 1)
check("last_by", [1, 2, 3].last_by(_0 != 1), 2)
check("last_index_by", [1, 2, 3].last_index_by(_0 != 1), 1)
check("reversed", [1, 2, 3].reversed(), [3, 2, 1])
check("map", [1, 2, 3].map(_0 * 2), [2, 4, 6])
check("fold", [1, 2, 3].fold(operator.add), 6)
check("fold empty", {}.fold(operator.add), None)
check("reduce", [1, 2, 3].reduce(0, operator.mul), 0)
check("enumerated", [1, 2, 3].enumerated(), [(0, 1), (1, 2), (2, 3)])
a = [1, 2, 3]
a.swap(1, 2)
check("swap", a, [1, 3, 2])
check("flatten", [[1, 2], 3, {4}].flatten(), [1, 2, 3, 4])
check("compact", [1, None, 2, None, None, 3].compact(), [1, 2, 3])
check("intersperse", [1, 2, 3].intersperse(0), [1, 0, 2, 0, 3])
check("window", [1, 2, 3, 4, 5].window(3), [[1, 2, 3], [2, 3, 4], [3, 4, 5]])
check("chunk", [1, 2, 3, 4, 5].chunk(2), [[1, 2], [3, 4], [5]])
check("chunk_by", [1, 2, 4, 5, 6, 8, 9, 11].chunk_by(_1 - _0 <= 1), [[1, 2], [4, 5, 6], [8, 9], [11]])
check("str_join", [1, 2, 3].str_join(", "), '1, 2, 3')
check("has_prefix", [1, 2, 3].has_prefix([1, 2]), True)
check("has_suffix", [1, 2, 3].has_suffix([1, 2]), False)
check("partition", [1, 2, 3].partition(_0 % 2), ([1, 3], [2]))
check("exclude_each", [1, 2, 3].exclude_each(), [[2, 3], [1, 3], [1, 2]])
(a, b) = (2, 1)
(a, b) = (a, b).sorted()
check("sorted", (a, b), (1, 2))
check("sorted predicate", [1, 2, 3].sorted(operator.gt), [3, 2, 1])
check("rotate", [1, 2, 3, 4].rotate(-3), [2, 3, 4, 1])
check("transpose", [[1, 2, 3, 4], [5, 6, 7, 8]].transpose(), [[1, 5], [2, 6], [3, 7], [4, 8]])
check("diagonals", [[1, 2, 3], [4, 5, 6], [7, 8, 9]].diagonals(), ([1, 5, 9], [3, 5, 7]))
check("sj_range 1-10", sj_range(1, 10), [1, 2, 3, 4, 5, 6, 7, 8, 9])
check("sj_range 10-1", sj_range(10, 1), [10, 9, 8, 7, 6, 5, 4, 3, 2])
check("sj_irange 1-10", sj_irange(1, 10), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
check("sj_irange 10-1", sj_irange(10, 1), [10, 9, 8, 7, 6, 5, 4, 3, 2, 1])
matrix = Matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
check("matrix dimensions", (matrix.rows, matrix.columns), (3, 3))
check("matrix subscript", matrix[1, 1], 5)
matrix[1, 1] += 10
check("matrix modify", matrix[1, 1], 15)
check("matrix neighbors8", (matrix.neighbors8(0, 0), matrix.neighbors8(1, 1), matrix.neighbors8(2, 2)), ([(0, 1), (1, 0), (1, 1)], [(0, 0), (0, 1), (0, 2), (1, 0), (1, 2), (2, 0), (2, 1), (2, 2)], [(1, 1), (1, 2), (2, 1)]))
check("matrix neighbors4", (matrix.neighbors4(0, 0), matrix.neighbors4(1, 1), matrix.neighbors4(2, 2)), ([(0, 1), (1, 0)], [(0, 1), (1, 0), (1, 2), (2, 1)], [(1, 2), (2, 1)]))
check("matrix neighbors4_diag", (matrix.neighbors4_diag(0, 0), matrix.neighbors4_diag(1, 1), matrix.neighbors4_diag(2, 2)), ([(1, 1)], [(0, 0), (2, 0), (0, 2), (2, 2)], [(1, 1)]))
